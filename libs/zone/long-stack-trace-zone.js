"use strict";
Zone.Stacktrace = function(e) {
  this._e = e;
};
Zone.Stacktrace.prototype.get = function() {
  if (zone.stackFramesFilter) {
    return this._e.stack.split('\n').filter(zone.stackFramesFilter).join('\n');
  }
  return this._e.stack;
};
Zone.getStacktrace = function() {
  function getStacktraceWithUncaughtError() {
    return new Zone.Stacktrace(new Error());
  }
  function getStacktraceWithCaughtError() {
    try {
      throw new Error();
    } catch (e) {
      return new Zone.Stacktrace(e);
    }
  }
  var stack = getStacktraceWithUncaughtError();
  if (stack && stack._e.stack) {
    Zone.getStacktrace = getStacktraceWithUncaughtError;
    return stack;
  } else {
    Zone.getStacktrace = getStacktraceWithCaughtError;
    return Zone.getStacktrace();
  }
};
Zone.longStackTraceZone = {
  getLongStacktrace: function(exception) {
    var trace = [];
    var zone = this;
    if (zone.stackFramesFilter) {
      trace.push(exception.stack.split('\n').filter(zone.stackFramesFilter).join('\n'));
    } else {
      trace.push(exception.stack);
    }
    var now = Date.now();
    while (zone && zone.constructedAtException) {
      trace.push('--- ' + (Date(zone.constructedAtTime)).toString() + ' - ' + (now - zone.constructedAtTime) + 'ms ago', zone.constructedAtException.get());
      zone = zone.parent;
    }
    return trace.join('\n');
  },
  stackFramesFilter: function(line) {
    return line.indexOf('zone.js') === -1;
  },
  onError: function(exception) {
    var reporter = this.reporter || console.log.bind(console);
    reporter(exception.toString());
    reporter(this.getLongStacktrace(exception));
  },
  fork: function(locals) {
    var newZone = this._fork(locals);
    newZone.constructedAtException = Zone.getStacktrace();
    newZone.constructedAtTime = Date.now();
    return newZone;
  },
  _fork: zone.fork
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnMvem9uZS9sb25nLXN0YWNrLXRyYWNlLXpvbmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUE7QUFBQSxHQUFHLFdBQVcsRUFBSSxVQUFVLENBQUEsQ0FBRztBQUM3QixLQUFHLEdBQUcsRUFBSSxFQUFBLENBQUM7QUFDYixDQUFDO0FBQ0QsR0FBRyxXQUFXLFVBQVUsSUFBSSxFQUFJLFVBQVMsQUFBQyxDQUFFO0FBQzFDLEtBQUksSUFBRyxrQkFBa0IsQ0FBRztBQUMxQixTQUFPLENBQUEsSUFBRyxHQUFHLE1BQU0sTUFDWCxBQUFDLENBQUMsSUFBRyxDQUFDLE9BQ0wsQUFBQyxDQUFDLElBQUcsa0JBQWtCLENBQUMsS0FDMUIsQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDO0VBQ2hCO0FBQUEsQUFDQSxPQUFPLENBQUEsSUFBRyxHQUFHLE1BQU0sQ0FBQztBQUN0QixDQUFBO0FBRUEsR0FBRyxjQUFjLEVBQUksVUFBUyxBQUFDLENBQUU7QUFDL0IsU0FBUywrQkFBNkIsQ0FBRSxBQUFDLENBQUU7QUFDekMsU0FBTyxJQUFJLENBQUEsSUFBRyxXQUFXLEFBQUMsQ0FBQyxHQUFJLE1BQUksQUFBQyxFQUFDLENBQUMsQ0FBQztFQUN6QztBQUFBLEFBRUEsU0FBUyw2QkFBMkIsQ0FBRSxBQUFDLENBQUU7QUFDdkMsTUFBSTtBQUNGLFVBQU0sSUFBSSxNQUFJLEFBQUMsRUFBQyxDQUFDO0lBQ25CLENBQUUsT0FBTyxDQUFBLENBQUc7QUFDVixXQUFPLElBQUksQ0FBQSxJQUFHLFdBQVcsQUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBQy9CO0FBQUEsRUFDRjtBQUFBLEFBSUksSUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLDhCQUE2QixBQUFDLEVBQUMsQ0FBQztBQUM1QyxLQUFJLEtBQUksR0FBSyxDQUFBLEtBQUksR0FBRyxNQUFNLENBQUc7QUFDM0IsT0FBRyxjQUFjLEVBQUksK0JBQTZCLENBQUM7QUFDbkQsU0FBTyxNQUFJLENBQUM7RUFDZCxLQUFPO0FBQ0wsT0FBRyxjQUFjLEVBQUksNkJBQTJCLENBQUM7QUFDakQsU0FBTyxDQUFBLElBQUcsY0FBYyxBQUFDLEVBQUMsQ0FBQztFQUM3QjtBQUFBLEFBQ0YsQ0FBQztBQUVELEdBQUcsbUJBQW1CLEVBQUk7QUFDeEIsa0JBQWdCLENBQUcsVUFBVSxTQUFRLENBQUc7QUFDdEMsQUFBSSxNQUFBLENBQUEsS0FBSSxFQUFJLEdBQUMsQ0FBQztBQUNkLEFBQUksTUFBQSxDQUFBLElBQUcsRUFBSSxLQUFHLENBQUM7QUFDZixPQUFJLElBQUcsa0JBQWtCLENBQUc7QUFDMUIsVUFBSSxLQUFLLEFBQUMsQ0FBQyxTQUFRLE1BQU0sTUFBTSxBQUFDLENBQUMsSUFBRyxDQUFDLE9BQzVCLEFBQUMsQ0FBQyxJQUFHLGtCQUFrQixDQUFDLEtBQzFCLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2pCLEtBQU87QUFDTCxVQUFJLEtBQUssQUFBQyxDQUFDLFNBQVEsTUFBTSxDQUFDLENBQUM7SUFDN0I7QUFBQSxBQUNJLE1BQUEsQ0FBQSxHQUFFLEVBQUksQ0FBQSxJQUFHLElBQUksQUFBQyxFQUFDLENBQUM7QUFDcEIsVUFBTyxJQUFHLEdBQUssQ0FBQSxJQUFHLHVCQUF1QixDQUFHO0FBQzFDLFVBQUksS0FBSyxBQUFDLENBQ04sTUFBSyxFQUFJLENBQUEsQ0FBQyxJQUFHLEFBQUMsQ0FBQyxJQUFHLGtCQUFrQixDQUFDLENBQUMsU0FBUyxBQUFDLEVBQUMsQ0FBQSxDQUMvQyxNQUFJLENBQUEsQ0FBSSxFQUFDLEdBQUUsRUFBSSxDQUFBLElBQUcsa0JBQWtCLENBQUMsQ0FBQSxDQUFJLFNBQU8sQ0FDbEQsQ0FBQSxJQUFHLHVCQUF1QixJQUFJLEFBQUMsRUFBQyxDQUFDLENBQUM7QUFDdEMsU0FBRyxFQUFJLENBQUEsSUFBRyxPQUFPLENBQUM7SUFDcEI7QUFBQSxBQUNBLFNBQU8sQ0FBQSxLQUFJLEtBQUssQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDO0VBQ3pCO0FBRUEsa0JBQWdCLENBQUcsVUFBVSxJQUFHLENBQUc7QUFDakMsU0FBTyxDQUFBLElBQUcsUUFBUSxBQUFDLENBQUMsU0FBUSxDQUFDLENBQUEsR0FBTSxFQUFDLENBQUEsQ0FBQztFQUN2QztBQUVBLFFBQU0sQ0FBRyxVQUFVLFNBQVEsQ0FBRztBQUM1QixBQUFJLE1BQUEsQ0FBQSxRQUFPLEVBQUksQ0FBQSxJQUFHLFNBQVMsR0FBSyxDQUFBLE9BQU0sSUFBSSxLQUFLLEFBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQztBQUN6RCxXQUFPLEFBQUMsQ0FBQyxTQUFRLFNBQVMsQUFBQyxFQUFDLENBQUMsQ0FBQztBQUM5QixXQUFPLEFBQUMsQ0FBQyxJQUFHLGtCQUFrQixBQUFDLENBQUMsU0FBUSxDQUFDLENBQUMsQ0FBQztFQUM3QztBQUVBLEtBQUcsQ0FBRyxVQUFVLE1BQUssQ0FBRztBQUN0QixBQUFJLE1BQUEsQ0FBQSxPQUFNLEVBQUksQ0FBQSxJQUFHLE1BQU0sQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0FBQ2hDLFVBQU0sdUJBQXVCLEVBQUksQ0FBQSxJQUFHLGNBQWMsQUFBQyxFQUFDLENBQUM7QUFDckQsVUFBTSxrQkFBa0IsRUFBSSxDQUFBLElBQUcsSUFBSSxBQUFDLEVBQUMsQ0FBQztBQUN0QyxTQUFPLFFBQU0sQ0FBQztFQUNoQjtBQUVBLE1BQUksQ0FBRyxDQUFBLElBQUcsS0FBSztBQUFBLEFBQ2pCLENBQUM7QUFFRCIsImZpbGUiOiJsaWJzL3pvbmUvbG9uZy1zdGFjay10cmFjZS16b25lLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFdyYXBwZWQgc3RhY2t0cmFjZVxuICpcbiAqIFdlIG5lZWQgdGhpcyBiZWNhdXNlIGluIHNvbWUgaW1wbGVtZW50YXRpb25zLCBjb25zdHJ1Y3RpbmcgYSB0cmFjZSBpcyBzbG93XG4gKiBhbmQgc28gd2Ugd2FudCB0byBkZWZlciBhY2Nlc3NpbmcgdGhlIHRyYWNlIGZvciBhcyBsb25nIGFzIHBvc3NpYmxlXG4gKi9cblpvbmUuU3RhY2t0cmFjZSA9IGZ1bmN0aW9uIChlKSB7XG4gIHRoaXMuX2UgPSBlO1xufTtcblpvbmUuU3RhY2t0cmFjZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAoem9uZS5zdGFja0ZyYW1lc0ZpbHRlcikge1xuICAgIHJldHVybiB0aGlzLl9lLnN0YWNrLlxuICAgICAgICBzcGxpdCgnXFxuJykuXG4gICAgICAgIGZpbHRlcih6b25lLnN0YWNrRnJhbWVzRmlsdGVyKS5cbiAgICAgICAgam9pbignXFxuJyk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX2Uuc3RhY2s7XG59XG5cblpvbmUuZ2V0U3RhY2t0cmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZ2V0U3RhY2t0cmFjZVdpdGhVbmNhdWdodEVycm9yICgpIHtcbiAgICByZXR1cm4gbmV3IFpvbmUuU3RhY2t0cmFjZShuZXcgRXJyb3IoKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTdGFja3RyYWNlV2l0aENhdWdodEVycm9yICgpIHtcbiAgICB0cnkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG5ldyBab25lLlN0YWNrdHJhY2UoZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gU29tZSBpbXBsZW1lbnRhdGlvbnMgb2YgZXhjZXB0aW9uIGhhbmRsaW5nIGRvbid0IGNyZWF0ZSBhIHN0YWNrIHRyYWNlIGlmIHRoZSBleGNlcHRpb25cbiAgLy8gaXNuJ3QgdGhyb3duLCBob3dldmVyIGl0J3MgZmFzdGVyIG5vdCB0byBhY3R1YWxseSB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICB2YXIgc3RhY2sgPSBnZXRTdGFja3RyYWNlV2l0aFVuY2F1Z2h0RXJyb3IoKTtcbiAgaWYgKHN0YWNrICYmIHN0YWNrLl9lLnN0YWNrKSB7XG4gICAgWm9uZS5nZXRTdGFja3RyYWNlID0gZ2V0U3RhY2t0cmFjZVdpdGhVbmNhdWdodEVycm9yO1xuICAgIHJldHVybiBzdGFjaztcbiAgfSBlbHNlIHtcbiAgICBab25lLmdldFN0YWNrdHJhY2UgPSBnZXRTdGFja3RyYWNlV2l0aENhdWdodEVycm9yO1xuICAgIHJldHVybiBab25lLmdldFN0YWNrdHJhY2UoKTtcbiAgfVxufTtcblxuWm9uZS5sb25nU3RhY2tUcmFjZVpvbmUgPSB7XG4gIGdldExvbmdTdGFja3RyYWNlOiBmdW5jdGlvbiAoZXhjZXB0aW9uKSB7XG4gICAgdmFyIHRyYWNlID0gW107XG4gICAgdmFyIHpvbmUgPSB0aGlzO1xuICAgIGlmICh6b25lLnN0YWNrRnJhbWVzRmlsdGVyKSB7XG4gICAgICB0cmFjZS5wdXNoKGV4Y2VwdGlvbi5zdGFjay5zcGxpdCgnXFxuJykuXG4gICAgICAgICAgZmlsdGVyKHpvbmUuc3RhY2tGcmFtZXNGaWx0ZXIpLlxuICAgICAgICAgIGpvaW4oJ1xcbicpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhY2UucHVzaChleGNlcHRpb24uc3RhY2spO1xuICAgIH1cbiAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICB3aGlsZSAoem9uZSAmJiB6b25lLmNvbnN0cnVjdGVkQXRFeGNlcHRpb24pIHtcbiAgICAgIHRyYWNlLnB1c2goXG4gICAgICAgICAgJy0tLSAnICsgKERhdGUoem9uZS5jb25zdHJ1Y3RlZEF0VGltZSkpLnRvU3RyaW5nKCkgK1xuICAgICAgICAgICAgJyAtICcgKyAobm93IC0gem9uZS5jb25zdHJ1Y3RlZEF0VGltZSkgKyAnbXMgYWdvJyxcbiAgICAgICAgICB6b25lLmNvbnN0cnVjdGVkQXRFeGNlcHRpb24uZ2V0KCkpO1xuICAgICAgem9uZSA9IHpvbmUucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gdHJhY2Uuam9pbignXFxuJyk7XG4gIH0sXG5cbiAgc3RhY2tGcmFtZXNGaWx0ZXI6IGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgcmV0dXJuIGxpbmUuaW5kZXhPZignem9uZS5qcycpID09PSAtMTtcbiAgfSxcblxuICBvbkVycm9yOiBmdW5jdGlvbiAoZXhjZXB0aW9uKSB7XG4gICAgdmFyIHJlcG9ydGVyID0gdGhpcy5yZXBvcnRlciB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIHJlcG9ydGVyKGV4Y2VwdGlvbi50b1N0cmluZygpKTtcbiAgICByZXBvcnRlcih0aGlzLmdldExvbmdTdGFja3RyYWNlKGV4Y2VwdGlvbikpO1xuICB9LFxuXG4gIGZvcms6IGZ1bmN0aW9uIChsb2NhbHMpIHtcbiAgICB2YXIgbmV3Wm9uZSA9IHRoaXMuX2ZvcmsobG9jYWxzKTtcbiAgICBuZXdab25lLmNvbnN0cnVjdGVkQXRFeGNlcHRpb24gPSBab25lLmdldFN0YWNrdHJhY2UoKTtcbiAgICBuZXdab25lLmNvbnN0cnVjdGVkQXRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICByZXR1cm4gbmV3Wm9uZTtcbiAgfSxcblxuICBfZm9yazogem9uZS5mb3JrXG59O1xuXG4iXX0=