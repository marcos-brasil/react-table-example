"use strict";
Object.defineProperties(exports, {
  profileInjector: {get: function() {
      return profileInjector;
    }},
  __esModule: {value: true}
});
var $__util__;
var toString = ($__util__ = require("./util"), $__util__ && $__util__.__esModule && $__util__ || {default: $__util__}).toString;
var IS_DEBUG = false;
var _global = null;
if (typeof location === 'object' && location.search) {
  IS_DEBUG = /di_debug/.test(location.search);
  _global = window;
} else {
  IS_DEBUG = !!process.env['DEBUG'];
  _global = global;
}
var globalCounter = 0;
function getUniqueId() {
  return ++globalCounter;
}
function serializeToken(token, tokens) {
  if (!tokens.has(token)) {
    tokens.set(token, getUniqueId().toString());
  }
  return tokens.get(token);
}
function serializeProvider(provider, key, tokens) {
  return {
    id: serializeToken(key, tokens),
    name: toString(key),
    isPromise: provider.isPromise,
    dependencies: provider.params.map(function(param) {
      return {
        token: serializeToken(param.token, tokens),
        isPromise: param.isPromise,
        isLazy: param.isLazy
      };
    })
  };
}
function serializeInjector(injector, tokens, Injector) {
  var serializedInjector = {
    id: serializeToken(injector, tokens),
    parent_id: injector._parent ? serializeToken(injector._parent, tokens) : null,
    providers: {}
  };
  var injectorClassId = serializeToken(Injector, tokens);
  serializedInjector.providers[injectorClassId] = {
    id: injectorClassId,
    name: toString(Injector),
    isPromise: false,
    dependencies: []
  };
  injector._providers.forEach(function(provider, key) {
    var serializedProvider = serializeProvider(provider, key, tokens);
    serializedInjector.providers[serializedProvider.id] = serializedProvider;
  });
  return serializedInjector;
}
function profileInjector(injector, Injector) {
  if (!IS_DEBUG) {
    return;
  }
  if (!_global.__di_dump__) {
    _global.__di_dump__ = {
      injectors: [],
      tokens: new Map()
    };
  }
  _global.__di_dump__.injectors.push(serializeInjector(injector, _global.__di_dump__.tokens, Injector));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnMvZGkvcHJvZmlsZXIuanMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNiIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci80IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci81IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxLQUFLLGlCQUFpQixBQUFDLENBQUMsT0FBTTtpQkNBOUIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsNEJBQXdCO0lBQUUsQURBOUIsQ0FBQztBRUF2QixXQUFTLENDQVQsRUFBQyxLQUFJLENEQU8sS0FBRyxBQ0FTLENBQUM7Q0pBeUIsQ0FBQzs7RURBM0MsU0FBTyxFTUFmLEVBQUMsV0FBb0IsQ0FBQSxPQUFNLEFBQUMsVUFBa0IsQ0FDdEMsQ0FBQSxZQUFxQixxQkFBMkIsQ0FBQSxZQUFxQixHQUFLLEVBQUMsT0FBTSxXQUFtQixDQUQ5RCxBQUMrRCxDQUFDO0FORTlHLEFBQUksRUFBQSxDQUFBLFFBQU8sRUFBSSxNQUFJLENBQUM7QUFDcEIsQUFBSSxFQUFBLENBQUEsT0FBTSxFQUFJLEtBQUcsQ0FBQztBQUVsQixHQUFJLE1BQU8sU0FBTyxDQUFBLEdBQU0sU0FBTyxDQUFBLEVBQUssQ0FBQSxRQUFPLE9BQU8sQ0FBRztBQUVuRCxTQUFPLEVBQUksQ0FBQSxVQUFTLEtBQUssQUFBQyxDQUFDLFFBQU8sT0FBTyxDQUFDLENBQUM7QUFDM0MsUUFBTSxFQUFJLE9BQUssQ0FBQztBQUNsQixLQUNLO0FBRUgsU0FBTyxFQUFJLEVBQUMsQ0FBQyxPQUFNLElBQUksQ0FBRSxPQUFNLENBQUMsQ0FBQztBQUNqQyxRQUFNLEVBQUksT0FBSyxDQUFDO0FBQ2xCO0FBQUEsQUFJSSxFQUFBLENBQUEsYUFBWSxFQUFJLEVBQUEsQ0FBQztBQUNyQixPQUFTLFlBQVUsQ0FBQyxBQUFDLENBQUU7QUFDckIsT0FBTyxHQUFFLGFBQVksQ0FBQztBQUN4QjtBQUFBLEFBR0EsT0FBUyxlQUFhLENBQUUsS0FBSSxDQUFHLENBQUEsTUFBSyxDQUFHO0FBQ3JDLEtBQUksQ0FBQyxNQUFLLElBQUksQUFBQyxDQUFDLEtBQUksQ0FBQyxDQUFHO0FBQ3RCLFNBQUssSUFBSSxBQUFDLENBQUMsS0FBSSxDQUFHLENBQUEsV0FBVSxBQUFDLEVBQUMsU0FBUyxBQUFDLEVBQUMsQ0FBQyxDQUFDO0VBQzdDO0FBQUEsQUFFQSxPQUFPLENBQUEsTUFBSyxJQUFJLEFBQUMsQ0FBQyxLQUFJLENBQUMsQ0FBQztBQUMxQjtBQUFBLEFBRUEsT0FBUyxrQkFBZ0IsQ0FBRSxRQUFPLENBQUcsQ0FBQSxHQUFFLENBQUcsQ0FBQSxNQUFLLENBQUc7QUFDaEQsT0FBTztBQUNMLEtBQUMsQ0FBRyxDQUFBLGNBQWEsQUFBQyxDQUFDLEdBQUUsQ0FBRyxPQUFLLENBQUM7QUFDOUIsT0FBRyxDQUFHLENBQUEsUUFBTyxBQUFDLENBQUMsR0FBRSxDQUFDO0FBQ2xCLFlBQVEsQ0FBRyxDQUFBLFFBQU8sVUFBVTtBQUM1QixlQUFXLENBQUcsQ0FBQSxRQUFPLE9BQU8sSUFBSSxBQUFDLENBQUMsU0FBUyxLQUFJLENBQUc7QUFDaEQsV0FBTztBQUNMLFlBQUksQ0FBRyxDQUFBLGNBQWEsQUFBQyxDQUFDLEtBQUksTUFBTSxDQUFHLE9BQUssQ0FBQztBQUN6QyxnQkFBUSxDQUFHLENBQUEsS0FBSSxVQUFVO0FBQ3pCLGFBQUssQ0FBRyxDQUFBLEtBQUksT0FBTztBQUFBLE1BQ3JCLENBQUM7SUFDSCxDQUFDO0FBQUEsRUFDSCxDQUFDO0FBQ0g7QUFBQSxBQUdBLE9BQVMsa0JBQWdCLENBQUUsUUFBTyxDQUFHLENBQUEsTUFBSyxDQUFHLENBQUEsUUFBTyxDQUFHO0FBQ3JELEFBQUksSUFBQSxDQUFBLGtCQUFpQixFQUFJO0FBQ3ZCLEtBQUMsQ0FBRyxDQUFBLGNBQWEsQUFBQyxDQUFDLFFBQU8sQ0FBRyxPQUFLLENBQUM7QUFDbkMsWUFBUSxDQUFHLENBQUEsUUFBTyxRQUFRLEVBQUksQ0FBQSxjQUFhLEFBQUMsQ0FBQyxRQUFPLFFBQVEsQ0FBRyxPQUFLLENBQUMsQ0FBQSxDQUFJLEtBQUc7QUFDNUUsWUFBUSxDQUFHLEdBQUM7QUFBQSxFQUNkLENBQUM7QUFFRCxBQUFJLElBQUEsQ0FBQSxlQUFjLEVBQUksQ0FBQSxjQUFhLEFBQUMsQ0FBQyxRQUFPLENBQUcsT0FBSyxDQUFDLENBQUM7QUFDdEQsbUJBQWlCLFVBQVUsQ0FBRSxlQUFjLENBQUMsRUFBSTtBQUM5QyxLQUFDLENBQUcsZ0JBQWM7QUFDbEIsT0FBRyxDQUFHLENBQUEsUUFBTyxBQUFDLENBQUMsUUFBTyxDQUFDO0FBQ3ZCLFlBQVEsQ0FBRyxNQUFJO0FBQ2YsZUFBVyxDQUFHLEdBQUM7QUFBQSxFQUNqQixDQUFDO0FBRUQsU0FBTyxXQUFXLFFBQVEsQUFBQyxDQUFDLFNBQVMsUUFBTyxDQUFHLENBQUEsR0FBRSxDQUFHO0FBQ2xELEFBQUksTUFBQSxDQUFBLGtCQUFpQixFQUFJLENBQUEsaUJBQWdCLEFBQUMsQ0FBQyxRQUFPLENBQUcsSUFBRSxDQUFHLE9BQUssQ0FBQyxDQUFDO0FBQ2pFLHFCQUFpQixVQUFVLENBQUUsa0JBQWlCLEdBQUcsQ0FBQyxFQUFJLG1CQUFpQixDQUFDO0VBQzFFLENBQUMsQ0FBQztBQUVGLE9BQU8sbUJBQWlCLENBQUM7QUFDM0I7QUFBQSxBQUdPLE9BQVMsZ0JBQWMsQ0FBRSxRQUFPLENBQUcsQ0FBQSxRQUFPLENBQUc7QUFDbEQsS0FBSSxDQUFDLFFBQU8sQ0FBRztBQUNiLFVBQU07RUFDUjtBQUFBLEFBRUEsS0FBSSxDQUFDLE9BQU0sWUFBWSxDQUFHO0FBQ3hCLFVBQU0sWUFBWSxFQUFJO0FBQ3BCLGNBQVEsQ0FBRyxHQUFDO0FBQ1osV0FBSyxDQUFHLElBQUksSUFBRSxBQUFDLEVBQUM7QUFBQSxJQUNsQixDQUFDO0VBQ0g7QUFBQSxBQUVBLFFBQU0sWUFBWSxVQUFVLEtBQUssQUFBQyxDQUFDLGlCQUFnQixBQUFDLENBQUMsUUFBTyxDQUFHLENBQUEsT0FBTSxZQUFZLE9BQU8sQ0FBRyxTQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3ZHO0FBQUEiLCJmaWxlIjoibGlicy9kaS9wcm9maWxlci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dG9TdHJpbmd9IGZyb20gJy4vdXRpbCc7XG5cblxudmFyIElTX0RFQlVHID0gZmFsc2U7XG52YXIgX2dsb2JhbCA9IG51bGw7XG5cbmlmICh0eXBlb2YgbG9jYXRpb24gPT09ICdvYmplY3QnICYmIGxvY2F0aW9uLnNlYXJjaCkge1xuICAvLyBCcm93c2VyXG4gIElTX0RFQlVHID0gL2RpX2RlYnVnLy50ZXN0KGxvY2F0aW9uLnNlYXJjaCk7XG4gIF9nbG9iYWwgPSB3aW5kb3c7XG59XG5lbHNlIHtcbiAgLy8gTm9kZS5qc1xuICBJU19ERUJVRyA9ICEhcHJvY2Vzcy5lbnZbJ0RFQlVHJ107XG4gIF9nbG9iYWwgPSBnbG9iYWw7XG59XG5cblxuXG52YXIgZ2xvYmFsQ291bnRlciA9IDA7XG5mdW5jdGlvbiBnZXRVbmlxdWVJZCgpIHtcbiAgcmV0dXJuICsrZ2xvYmFsQ291bnRlcjtcbn1cblxuXG5mdW5jdGlvbiBzZXJpYWxpemVUb2tlbih0b2tlbiwgdG9rZW5zKSB7XG4gIGlmICghdG9rZW5zLmhhcyh0b2tlbikpIHtcbiAgICB0b2tlbnMuc2V0KHRva2VuLCBnZXRVbmlxdWVJZCgpLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vucy5nZXQodG9rZW4pO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVQcm92aWRlcihwcm92aWRlciwga2V5LCB0b2tlbnMpIHtcbiAgcmV0dXJuIHtcbiAgICBpZDogc2VyaWFsaXplVG9rZW4oa2V5LCB0b2tlbnMpLFxuICAgIG5hbWU6IHRvU3RyaW5nKGtleSksXG4gICAgaXNQcm9taXNlOiBwcm92aWRlci5pc1Byb21pc2UsXG4gICAgZGVwZW5kZW5jaWVzOiBwcm92aWRlci5wYXJhbXMubWFwKGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b2tlbjogc2VyaWFsaXplVG9rZW4ocGFyYW0udG9rZW4sIHRva2VucyksXG4gICAgICAgIGlzUHJvbWlzZTogcGFyYW0uaXNQcm9taXNlLFxuICAgICAgICBpc0xhenk6IHBhcmFtLmlzTGF6eVxuICAgICAgfTtcbiAgICB9KVxuICB9O1xufVxuXG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZUluamVjdG9yKGluamVjdG9yLCB0b2tlbnMsIEluamVjdG9yKSB7XG4gIHZhciBzZXJpYWxpemVkSW5qZWN0b3IgPSB7XG4gICAgaWQ6IHNlcmlhbGl6ZVRva2VuKGluamVjdG9yLCB0b2tlbnMpLFxuICAgIHBhcmVudF9pZDogaW5qZWN0b3IuX3BhcmVudCA/IHNlcmlhbGl6ZVRva2VuKGluamVjdG9yLl9wYXJlbnQsIHRva2VucykgOiBudWxsLFxuICAgIHByb3ZpZGVyczoge31cbiAgfTtcblxuICB2YXIgaW5qZWN0b3JDbGFzc0lkID0gc2VyaWFsaXplVG9rZW4oSW5qZWN0b3IsIHRva2Vucyk7XG4gIHNlcmlhbGl6ZWRJbmplY3Rvci5wcm92aWRlcnNbaW5qZWN0b3JDbGFzc0lkXSA9IHtcbiAgICBpZDogaW5qZWN0b3JDbGFzc0lkLFxuICAgIG5hbWU6IHRvU3RyaW5nKEluamVjdG9yKSxcbiAgICBpc1Byb21pc2U6IGZhbHNlLFxuICAgIGRlcGVuZGVuY2llczogW11cbiAgfTtcblxuICBpbmplY3Rvci5fcHJvdmlkZXJzLmZvckVhY2goZnVuY3Rpb24ocHJvdmlkZXIsIGtleSkge1xuICAgIHZhciBzZXJpYWxpemVkUHJvdmlkZXIgPSBzZXJpYWxpemVQcm92aWRlcihwcm92aWRlciwga2V5LCB0b2tlbnMpO1xuICAgIHNlcmlhbGl6ZWRJbmplY3Rvci5wcm92aWRlcnNbc2VyaWFsaXplZFByb3ZpZGVyLmlkXSA9IHNlcmlhbGl6ZWRQcm92aWRlcjtcbiAgfSk7XG5cbiAgcmV0dXJuIHNlcmlhbGl6ZWRJbmplY3Rvcjtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gcHJvZmlsZUluamVjdG9yKGluamVjdG9yLCBJbmplY3Rvcikge1xuICBpZiAoIUlTX0RFQlVHKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFfZ2xvYmFsLl9fZGlfZHVtcF9fKSB7XG4gICAgX2dsb2JhbC5fX2RpX2R1bXBfXyA9IHtcbiAgICAgIGluamVjdG9yczogW10sXG4gICAgICB0b2tlbnM6IG5ldyBNYXAoKVxuICAgIH07XG4gIH1cblxuICBfZ2xvYmFsLl9fZGlfZHVtcF9fLmluamVjdG9ycy5wdXNoKHNlcmlhbGl6ZUluamVjdG9yKGluamVjdG9yLCBfZ2xvYmFsLl9fZGlfZHVtcF9fLnRva2VucywgSW5qZWN0b3IpKTtcbn1cbiIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGV4cG9ydHMsICRfX3BsYWNlaG9sZGVyX18wKTsiLCJ7Z2V0OiAkX19wbGFjZWhvbGRlcl9fMH0iLCJnZXQgJF9fcGxhY2Vob2xkZXJfXzAoKSB7IHJldHVybiAkX19wbGFjZWhvbGRlcl9fMTsgfSIsIl9fZXNNb2R1bGU6IHRydWUiLCJ7dmFsdWU6ICRfX3BsYWNlaG9sZGVyX18wfSIsIigkX19wbGFjZWhvbGRlcl9fMCA9IHJlcXVpcmUoJF9fcGxhY2Vob2xkZXJfXzEpLCBcbiAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzIgJiYgJF9fcGxhY2Vob2xkZXJfXzMuX19lc01vZHVsZSAmJiAkX19wbGFjZWhvbGRlcl9fNCB8fCB7ZGVmYXVsdDogJF9fcGxhY2Vob2xkZXJfXzV9KSJdfQ==