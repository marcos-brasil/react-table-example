"use strict";
Object.defineProperties(exports, {
  annotate: {get: function() {
      return annotate;
    }},
  hasAnnotation: {get: function() {
      return hasAnnotation;
    }},
  readAnnotations: {get: function() {
      return readAnnotations;
    }},
  SuperConstructor: {get: function() {
      return SuperConstructor;
    }},
  TransientScope: {get: function() {
      return TransientScope;
    }},
  Inject: {get: function() {
      return Inject;
    }},
  InjectPromise: {get: function() {
      return InjectPromise;
    }},
  InjectLazy: {get: function() {
      return InjectLazy;
    }},
  Provide: {get: function() {
      return Provide;
    }},
  ProvidePromise: {get: function() {
      return ProvidePromise;
    }},
  __esModule: {value: true}
});
var $__util__;
var isFunction = ($__util__ = require("./util"), $__util__ && $__util__.__esModule && $__util__ || {default: $__util__}).isFunction;
var SuperConstructor = function SuperConstructor() {};
($traceurRuntime.createClass)(SuperConstructor, {}, {});
var TransientScope = function TransientScope() {};
($traceurRuntime.createClass)(TransientScope, {}, {});
var Inject = function Inject() {
  for (var tokens = [],
      $__6 = 0; $__6 < arguments.length; $__6++)
    tokens[$__6] = arguments[$__6];
  this.tokens = tokens;
  this.isPromise = false;
  this.isLazy = false;
};
($traceurRuntime.createClass)(Inject, {}, {});
var InjectPromise = function InjectPromise() {
  for (var tokens = [],
      $__7 = 0; $__7 < arguments.length; $__7++)
    tokens[$__7] = arguments[$__7];
  this.tokens = tokens;
  this.isPromise = true;
  this.isLazy = false;
};
($traceurRuntime.createClass)(InjectPromise, {}, {}, Inject);
var InjectLazy = function InjectLazy() {
  for (var tokens = [],
      $__8 = 0; $__8 < arguments.length; $__8++)
    tokens[$__8] = arguments[$__8];
  this.tokens = tokens;
  this.isPromise = false;
  this.isLazy = true;
};
($traceurRuntime.createClass)(InjectLazy, {}, {}, Inject);
var Provide = function Provide(token) {
  this.token = token;
  this.isPromise = false;
};
($traceurRuntime.createClass)(Provide, {}, {});
var ProvidePromise = function ProvidePromise(token) {
  this.token = token;
  this.isPromise = true;
};
($traceurRuntime.createClass)(ProvidePromise, {}, {}, Provide);
function annotate(fn, annotation) {
  fn.annotations = fn.annotations || [];
  fn.annotations.push(annotation);
}
function hasAnnotation(fn, annotationClass) {
  if (!fn.annotations || fn.annotations.length === 0) {
    return false;
  }
  for (var $__2 = fn.annotations[Symbol.iterator](),
      $__3; !($__3 = $__2.next()).done; ) {
    var annotation = $__3.value;
    {
      if (annotation instanceof annotationClass) {
        return true;
      }
    }
  }
  return false;
}
function readAnnotations(fn) {
  var collectedAnnotations = {
    provide: {
      token: null,
      isPromise: false
    },
    params: []
  };
  if (fn.annotations && fn.annotations.length) {
    for (var $__2 = fn.annotations[Symbol.iterator](),
        $__3; !($__3 = $__2.next()).done; ) {
      var annotation = $__3.value;
      {
        if (annotation instanceof Inject) {
          annotation.tokens.forEach((function(token) {
            collectedAnnotations.params.push({
              token: token,
              isPromise: annotation.isPromise,
              isLazy: annotation.isLazy
            });
          }));
        }
        if (annotation instanceof Provide) {
          collectedAnnotations.provide.token = annotation.token;
          collectedAnnotations.provide.isPromise = annotation.isPromise;
        }
      }
    }
  }
  if (fn.parameters) {
    fn.parameters.forEach((function(param, idx) {
      for (var $__4 = param[Symbol.iterator](),
          $__5; !($__5 = $__4.next()).done; ) {
        var paramAnnotation = $__5.value;
        {
          if (isFunction(paramAnnotation) && !collectedAnnotations.params[idx]) {
            collectedAnnotations.params[idx] = {
              token: paramAnnotation,
              isPromise: false,
              isLazy: false
            };
          } else if (paramAnnotation instanceof Inject) {
            collectedAnnotations.params[idx] = {
              token: paramAnnotation.tokens[0],
              isPromise: paramAnnotation.isPromise,
              isLazy: paramAnnotation.isLazy
            };
          }
        }
      }
    }));
  }
  return collectedAnnotations;
}
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnMvZGkvYW5ub3RhdGlvbnMuanMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNiIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci80IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci81IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzEiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvOCIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci85IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzEyIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzEwIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzExIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsS0FBSyxpQkFBaUIsQUFBQyxDQUFDLE9BQU07VUNBOUIsRUFBQyxHQUFFLFlDQXFCO0FBQUUscUJBQXdCO0lBQUUsQURBOUIsQ0FBQztlQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSwwQkFBd0I7SUFBRSxBREE5QixDQUFDO2lCQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSw0QkFBd0I7SUFBRSxBREE5QixDQUFDO2tCQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSw2QkFBd0I7SUFBRSxBREE5QixDQUFDO2dCQUF2QixFQUFDLEdBQUUsWUNBcUI7QUFBRSwyQkFBd0I7SUFBRSxBREE5QixDQUFDO1FBQXZCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLG1CQUF3QjtJQUFFLEFEQTlCLENBQUM7ZUFBdkIsRUFBQyxHQUFFLFlDQXFCO0FBQUUsMEJBQXdCO0lBQUUsQURBOUIsQ0FBQztZQUF2QixFQUFDLEdBQUUs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WUFDZCxDQUFDO1VBQ0gsS0FBTyxLQUFJLGVBQWMsV0FBYSxPQUFLLENBQUc7QUFDNUMsK0JBQW1CLE9BQU8sQ0FBRSxHQUFFLENBQUMsRUFBSTtBQUNqQyxrQkFBSSxDQUFHLENBQUEsZUFBYyxPQUFPLENBQUUsQ0FBQSxDQUFDO0FBQy9CLHNCQUFRLENBQUcsQ0FBQSxlQUFjLFVBQVU7QUFDbkMsbUJBQUssQ0FBRyxDQUFBLGVBQWMsT0FBTztBQUFBLFlBQy9CLENBQUM7VUFDSDtBQUFBLFFBQ0Y7TVduSUU7QUFBQSxJWG9JSixFQUFDLENBQUM7RUFDSjtBQUFBLEFBRUEsT0FBTyxxQkFBbUIsQ0FBQztBQUM3Qjs7QUFnQkEiLCJmaWxlIjoibGlicy9kaS9hbm5vdGF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNGdW5jdGlvbn0gZnJvbSAnLi91dGlsJztcblxuXG4vLyBUaGlzIG1vZHVsZSBjb250YWluczpcbi8vIC0gYnVpbHQtaW4gYW5ub3RhdGlvbiBjbGFzc2VzXG4vLyAtIGhlbHBlcnMgdG8gcmVhZC93cml0ZSBhbm5vdGF0aW9uc1xuXG5cbi8vIEFOTk9UQVRJT05TXG5cbi8vIEEgYnVpbHQtaW4gdG9rZW4uXG4vLyBVc2VkIHRvIGFzayBmb3IgcHJlLWluamVjdGVkIHBhcmVudCBjb25zdHJ1Y3Rvci5cbi8vIEEgY2xhc3MgY29uc3RydWN0b3IgY2FuIGFzayBmb3IgdGhpcy5cbmNsYXNzIFN1cGVyQ29uc3RydWN0b3Ige31cblxuLy8gQSBidWlsdC1pbiBzY29wZS5cbi8vIE5ldmVyIGNhY2hlLlxuY2xhc3MgVHJhbnNpZW50U2NvcGUge31cblxuY2xhc3MgSW5qZWN0IHtcbiAgY29uc3RydWN0b3IoLi4udG9rZW5zKSB7XG4gICAgdGhpcy50b2tlbnMgPSB0b2tlbnM7XG4gICAgdGhpcy5pc1Byb21pc2UgPSBmYWxzZTtcbiAgICB0aGlzLmlzTGF6eSA9IGZhbHNlO1xuICB9XG59XG5cbmNsYXNzIEluamVjdFByb21pc2UgZXh0ZW5kcyBJbmplY3Qge1xuICBjb25zdHJ1Y3RvciguLi50b2tlbnMpIHtcbiAgICB0aGlzLnRva2VucyA9IHRva2VucztcbiAgICB0aGlzLmlzUHJvbWlzZSA9IHRydWU7XG4gICAgdGhpcy5pc0xhenkgPSBmYWxzZTtcbiAgfVxufVxuXG5jbGFzcyBJbmplY3RMYXp5IGV4dGVuZHMgSW5qZWN0IHtcbiAgY29uc3RydWN0b3IoLi4udG9rZW5zKSB7XG4gICAgdGhpcy50b2tlbnMgPSB0b2tlbnM7XG4gICAgdGhpcy5pc1Byb21pc2UgPSBmYWxzZTtcbiAgICB0aGlzLmlzTGF6eSA9IHRydWU7XG4gIH1cbn1cblxuY2xhc3MgUHJvdmlkZSB7XG4gIGNvbnN0cnVjdG9yKHRva2VuKSB7XG4gICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgIHRoaXMuaXNQcm9taXNlID0gZmFsc2U7XG4gIH1cbn1cblxuY2xhc3MgUHJvdmlkZVByb21pc2UgZXh0ZW5kcyBQcm92aWRlIHtcbiAgY29uc3RydWN0b3IodG9rZW4pIHtcbiAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgdGhpcy5pc1Byb21pc2UgPSB0cnVlO1xuICB9XG59XG5cblxuLy8gSEVMUEVSU1xuXG4vLyBBcHBlbmQgYW5ub3RhdGlvbiBvbiBhIGZ1bmN0aW9uIG9yIGNsYXNzLlxuLy8gVGhpcyBjYW4gYmUgaGVscGZ1bCB3aGVuIG5vdCB1c2luZyBFUzYrLlxuZnVuY3Rpb24gYW5ub3RhdGUoZm4sIGFubm90YXRpb24pIHtcbiAgZm4uYW5ub3RhdGlvbnMgPSBmbi5hbm5vdGF0aW9ucyB8fCBbXTtcbiAgZm4uYW5ub3RhdGlvbnMucHVzaChhbm5vdGF0aW9uKTtcbn1cblxuXG4vLyBSZWFkIGFubm90YXRpb25zIG9uIGEgZnVuY3Rpb24gb3IgY2xhc3MgYW5kIHJldHVybiB3aGV0aGVyIGdpdmVuIGFubm90YXRpb24gaXMgcHJlc2VudC5cbmZ1bmN0aW9uIGhhc0Fubm90YXRpb24oZm4sIGFubm90YXRpb25DbGFzcykge1xuICBpZiAoIWZuLmFubm90YXRpb25zIHx8IGZuLmFubm90YXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGFubm90YXRpb24gb2YgZm4uYW5ub3RhdGlvbnMpIHtcbiAgICBpZiAoYW5ub3RhdGlvbiBpbnN0YW5jZW9mIGFubm90YXRpb25DbGFzcykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5cbi8vIFJlYWQgYW5ub3RhdGlvbnMgb24gYSBmdW5jdGlvbiBvciBjbGFzcyBhbmQgY29sbGVjdCBcImludGVyZXN0aW5nXCIgbWV0YWRhdGE6XG5mdW5jdGlvbiByZWFkQW5ub3RhdGlvbnMoZm4pIHtcbiAgdmFyIGNvbGxlY3RlZEFubm90YXRpb25zID0ge1xuICAgIC8vIERlc2NyaXB0aW9uIG9mIHRoZSBwcm92aWRlZCB2YWx1ZS5cbiAgICBwcm92aWRlOiB7XG4gICAgICB0b2tlbjogbnVsbCxcbiAgICAgIGlzUHJvbWlzZTogZmFsc2VcbiAgICB9LFxuXG4gICAgLy8gTGlzdCBvZiBwYXJhbWV0ZXIgZGVzY3JpcHRpb25zLlxuICAgIC8vIEEgcGFyYW1ldGVyIGRlc2NyaXB0aW9uIGlzIGFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXM6XG4gICAgLy8gLSB0b2tlbiAoYW55dGhpbmcpXG4gICAgLy8gLSBpc1Byb21pc2UgKGJvb2xlYW4pXG4gICAgLy8gLSBpc0xhenkgKGJvb2xlYW4pXG4gICAgcGFyYW1zOiBbXVxuICB9O1xuXG4gIGlmIChmbi5hbm5vdGF0aW9ucyAmJiBmbi5hbm5vdGF0aW9ucy5sZW5ndGgpIHtcbiAgICBmb3IgKHZhciBhbm5vdGF0aW9uIG9mIGZuLmFubm90YXRpb25zKSB7XG4gICAgICBpZiAoYW5ub3RhdGlvbiBpbnN0YW5jZW9mIEluamVjdCkge1xuICAgICAgICBhbm5vdGF0aW9uLnRva2Vucy5mb3JFYWNoKCh0b2tlbikgPT4ge1xuICAgICAgICAgIGNvbGxlY3RlZEFubm90YXRpb25zLnBhcmFtcy5wdXNoKHtcbiAgICAgICAgICAgIHRva2VuOiB0b2tlbixcbiAgICAgICAgICAgIGlzUHJvbWlzZTogYW5ub3RhdGlvbi5pc1Byb21pc2UsXG4gICAgICAgICAgICBpc0xhenk6IGFubm90YXRpb24uaXNMYXp5XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5ub3RhdGlvbiBpbnN0YW5jZW9mIFByb3ZpZGUpIHtcbiAgICAgICAgY29sbGVjdGVkQW5ub3RhdGlvbnMucHJvdmlkZS50b2tlbiA9IGFubm90YXRpb24udG9rZW47XG4gICAgICAgIGNvbGxlY3RlZEFubm90YXRpb25zLnByb3ZpZGUuaXNQcm9taXNlID0gYW5ub3RhdGlvbi5pc1Byb21pc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUmVhZCBhbm5vdGF0aW9ucyBmb3IgaW5kaXZpZHVhbCBwYXJhbWV0ZXJzLlxuICBpZiAoZm4ucGFyYW1ldGVycykge1xuICAgIGZuLnBhcmFtZXRlcnMuZm9yRWFjaCgocGFyYW0sIGlkeCkgPT4ge1xuICAgICAgZm9yICh2YXIgcGFyYW1Bbm5vdGF0aW9uIG9mIHBhcmFtKSB7XG4gICAgICAgIC8vIFR5cGUgYW5ub3RhdGlvbi5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ocGFyYW1Bbm5vdGF0aW9uKSAmJiAhY29sbGVjdGVkQW5ub3RhdGlvbnMucGFyYW1zW2lkeF0pIHtcbiAgICAgICAgICBjb2xsZWN0ZWRBbm5vdGF0aW9ucy5wYXJhbXNbaWR4XSA9IHtcbiAgICAgICAgICAgIHRva2VuOiBwYXJhbUFubm90YXRpb24sXG4gICAgICAgICAgICBpc1Byb21pc2U6IGZhbHNlLFxuICAgICAgICAgICAgaXNMYXp5OiBmYWxzZVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW1Bbm5vdGF0aW9uIGluc3RhbmNlb2YgSW5qZWN0KSB7XG4gICAgICAgICAgY29sbGVjdGVkQW5ub3RhdGlvbnMucGFyYW1zW2lkeF0gPSB7XG4gICAgICAgICAgICB0b2tlbjogcGFyYW1Bbm5vdGF0aW9uLnRva2Vuc1swXSxcbiAgICAgICAgICAgIGlzUHJvbWlzZTogcGFyYW1Bbm5vdGF0aW9uLmlzUHJvbWlzZSxcbiAgICAgICAgICAgIGlzTGF6eTogcGFyYW1Bbm5vdGF0aW9uLmlzTGF6eVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBjb2xsZWN0ZWRBbm5vdGF0aW9ucztcbn1cblxuXG5leHBvcnQge1xuICBhbm5vdGF0ZSxcbiAgaGFzQW5ub3RhdGlvbixcbiAgcmVhZEFubm90YXRpb25zLFxuXG4gIFN1cGVyQ29uc3RydWN0b3IsXG4gIFRyYW5zaWVudFNjb3BlLFxuICBJbmplY3QsXG4gIEluamVjdFByb21pc2UsXG4gIEluamVjdExhenksXG4gIFByb3ZpZGUsXG4gIFByb3ZpZGVQcm9taXNlXG59O1xuIiwiT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZXhwb3J0cywgJF9fcGxhY2Vob2xkZXJfXzApOyIsIntnZXQ6ICRfX3BsYWNlaG9sZGVyX18wfSIsImdldCAkX19wbGFjZWhvbGRlcl9fMCgpIHsgcmV0dXJuICRfX3BsYWNlaG9sZGVyX18xOyB9IiwiX19lc01vZHVsZTogdHJ1ZSIsInt2YWx1ZTogJF9fcGxhY2Vob2xkZXJfXzB9IiwiKCRfX3BsYWNlaG9sZGVyX18wID0gcmVxdWlyZSgkX19wbGFjZWhvbGRlcl9fMSksIFxuICAgICAgICAkX19wbGFjZWhvbGRlcl9fMiAmJiAkX19wbGFjZWhvbGRlcl9fMy5fX2VzTW9kdWxlICYmICRfX3BsYWNlaG9sZGVyX180IHx8IHtkZWZhdWx0OiAkX19wbGFjZWhvbGRlcl9fNX0pIiwidmFyICRfX3BsYWNlaG9sZGVyX18wID0gJF9fcGxhY2Vob2xkZXJfXzEiLCIoJHRyYWNldXJSdW50aW1lLmNyZWF0ZUNsYXNzKSgkX19wbGFjZWhvbGRlcl9fMCwgJF9fcGxhY2Vob2xkZXJfXzEsICRfX3BsYWNlaG9sZGVyX18yKSIsIlxuICAgICAgICAgICAgZm9yICh2YXIgJF9fcGxhY2Vob2xkZXJfXzAgPSBbXSwgJF9fcGxhY2Vob2xkZXJfXzEgPSAwO1xuICAgICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMiA8IGFyZ3VtZW50cy5sZW5ndGg7ICRfX3BsYWNlaG9sZGVyX18zKyspXG4gICAgICAgICAgICAgICRfX3BsYWNlaG9sZGVyX180WyRfX3BsYWNlaG9sZGVyX181XSA9IGFyZ3VtZW50c1skX19wbGFjZWhvbGRlcl9fNl07IiwiKCR0cmFjZXVyUnVudGltZS5jcmVhdGVDbGFzcykoJF9fcGxhY2Vob2xkZXJfXzAsICRfX3BsYWNlaG9sZGVyX18xLCAkX19wbGFjZWhvbGRlcl9fMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfX3BsYWNlaG9sZGVyX18zKSIsIlxuICAgICAgICBmb3IgKHZhciAkX19wbGFjZWhvbGRlcl9fMCA9XG4gICAgICAgICAgICAgICAgICRfX3BsYWNlaG9sZGVyX18xW1N5bWJvbC5pdGVyYXRvcl0oKSxcbiAgICAgICAgICAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzI7XG4gICAgICAgICAgICAgISgkX19wbGFjZWhvbGRlcl9fMyA9ICRfX3BsYWNlaG9sZGVyX180Lm5leHQoKSkuZG9uZTsgKSB7XG4gICAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzU7XG4gICAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzY7XG4gICAgICAgIH0iXX0=