"use strict";
Object.defineProperties(exports, {
  Diary: {get: function() {
      return Diary;
    }},
  __esModule: {value: true}
});
var Diary = function Diary(group) {
  this.group = group;
};
var $Diary = Diary;
($traceurRuntime.createClass)(Diary, {log: function(level, group, message) {
    for (var $__1 = $Diary.reporters[Symbol.iterator](),
        $__2; !($__2 = $__1.next()).done; ) {
      var target = $__2.value;
      {
        var $__3 = target,
            config = $__3.config,
            reporter = $__3.reporter;
        if ((config.level.indexOf('*') !== -1 || config.level.indexOf(level) !== -1) && (config.group.indexOf('*') !== -1 || config.group.indexOf(group) !== -1)) {
          reporter.receive({
            level: level,
            group: group,
            message: message
          });
        }
      }
    }
  }}, {
  logger: function(group) {
    return new $Diary(group);
  },
  reporter: function(reporter) {
    var config = arguments[1] !== (void 0) ? arguments[1] : {};
    var defaults = {
      level: ['*'],
      group: ['*']
    };
    config = [defaults, config].reduce(Object.assign);
    var newReporter = {
      reporter: reporter,
      config: config
    };
    $Diary.reporters.push(newReporter);
    return (function() {
      $Diary.reporters.splice($Diary.reporters.indexOf(newReporter), 1);
    });
  },
  get reporters() {
    return reporters;
  }
});
var reporters = [];
for (var $__1 = ['info', 'warn', 'fatal', 'error'][Symbol.iterator](),
    $__2; !($__2 = $__1.next()).done; ) {
  var level = $__2.value;
  (function(level) {
    Diary.prototype[level] = function(message) {
      this.log(level, this.group, message);
    };
  })(level);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnMvZGlhcnkvaW5kZXguanMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNiIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci80IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci81IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzgiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMTMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvOSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLEtBQUssaUJBQWlCLEFBQUMsQ0FBQyxPQUFNO09DQTlCLEVBQUMsR0FBRSxZQ0FxQjtBQUFFLGtCQUF3QjtJQUFFLEFEQTlCLENBQUM7QUVBdkIsV0FBUyxDQ0FULEVBQUMsS0FBSSxDREFPLEtBQUcsQUNBUyxDQUFDO0NKQXlCLENBQUM7QUtBbkQsQUFBSSxFQUFBLFFOQUcsU0FBTSxNQUFJLENBQ0gsS0FBSSxDQUFHO0FBQ2pCLEtBQUcsTUFBTSxFQUFJLE1BQUksQ0FBQztBTUZrQixBTkd0QyxDTUhzQztBQ0F4QyxBQUFJLEVBQUEsZUFBb0MsQ0FBQTtBQ0F4QyxBQUFDLGVBQWMsWUFBWSxDQUFDLEFBQUMsU1JLM0IsR0FBRSxDQUFGLFVBQUksS0FBSSxDQUFHLENBQUEsS0FBSSxDQUFHLENBQUEsT0FBTTtBU0psQixRQUFTLEdBQUEsT0FDQSxDVElNLGdCQUFjLENTSkYsTUFBSyxTQUFTLENBQUMsQUFBQyxFQUFDO0FBQ25DLFdBQWdCLENBQ3BCLEVBQUMsQ0FBQyxNQUFvQixDQUFBLFNBQXFCLEFBQUMsRUFBQyxDQUFDLEtBQUssR0FBSztRVEV4RCxPQUFLO0FBQXNCO0FBQ2xDLGlCQUF5QixPQUFLO0FBQXpCLGlCQUFLO0FBQUcsbUJBQU8saUJBQVc7QUFDL0IsV0FBSSxDQUFDLE1BQUssTUFBTSxRQUFRLEFBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQSxHQUFNLEVBQUMsQ0FBQSxDQUFBLEVBQUssQ0FBQSxNQUFLLE1BQU0sUUFBUSxBQUFDLENBQUMsS0FBSSxDQUFDLENBQUEsR0FBTSxFQUFDLENBQUEsQ0FBQyxHQUV2RSxFQUFDLE1BQUssTUFBTSxRQUFRLEFBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQSxHQUFNLEVBQUMsQ0FBQSxDQUFBLEVBQUssQ0FBQSxNQUFLLE1BQU0sUUFBUSxBQUFDLENBQUMsS0FBSSxDQUFDLENBQUEsR0FBTSxFQUFDLENBQUEsQ0FBQyxDQUN0RTtBQUNILGlCQUFPLFFBQVEsQUFBQyxDQUFDO0FBQ2YsZ0JBQUksQ0FBSixNQUFJO0FBQUcsZ0JBQUksQ0FBSixNQUFJO0FBQUcsa0JBQU0sQ0FBTixRQUFNO0FBQUEsVUFDdEIsQ0FBQyxDQUFDO1FBQ0o7QUFBQSxNQUNGO0lTVEk7QUFBQSxFVFVOO0FBS08sT0FBSyxDQUFaLFVBQWMsS0FBSSxDQUFHO0FBQ25CLFNBQU8sV0FBUyxDQUFDLEtBQUksQ0FBQyxDQUFDO0VBQ3pCO0FBSU8sU0FBTyxDQUFkLFVBQWdCLFFBQU8sQUFBYTtNQUFWLE9BQUssNkNBQUksR0FBQztBQUNsQyxBQUFJLE1BQUEsQ0FBQSxRQUFPLEVBQUk7QUFBRSxVQUFJLENBQUcsRUFBQyxHQUFFLENBQUM7QUFBRyxVQUFJLENBQUcsRUFBQyxHQUFFLENBQUM7QUFBQSxJQUFFLENBQUM7QUFDN0MsU0FBSyxFQUFJLENBQUEsQ0FBQyxRQUFPLENBQUcsT0FBSyxDQUFDLE9BQU8sQUFBQyxDQUFDLE1BQUssT0FBTyxDQUFDLENBQUM7QUFDakQsQUFBSSxNQUFBLENBQUEsV0FBVSxFQUFJO0FBQ2hCLGFBQU8sQ0FBUCxTQUFPO0FBQUcsV0FBSyxDQUFMLE9BQUs7QUFBQSxJQUNqQixDQUFDO0FBRUQsbUJBQWMsS0FBSyxBQUFDLENBQUMsV0FBVSxDQUFDLENBQUM7QUFFakMsV0FBTyxTQUFBLEFBQUMsQ0FBSztBQUNYLHFCQUFjLE9BQU8sQUFBQyxDQUFDLGdCQUFjLFFBQVEsQUFBQyxDQUFDLFdBQVUsQ0FBQyxDQUFHLEVBQUEsQ0FBQyxDQUFDO0lBQ2pFLEVBQUM7RUFDSDtBQUVBLElBQVcsVUFBUSxFQUFJO0FBQ3JCLFNBQU8sVUFBUSxDQUFDO0VBQ2xCO0FBQUEsQ1E1Q21GO0FSK0NyRixBQUFJLEVBQUEsQ0FBQSxTQUFRLEVBQUksR0FBQyxDQUFDO0FTOUNWLElBQVMsR0FBQSxPQUNBLENUa0RDLENBQUMsTUFBSyxDQUFHLE9BQUssQ0FBRyxRQUFNLENBQUcsUUFBTSxDQUFDLENTbERoQixNQUFLLFNBQVMsQ0FBQyxBQUFDLEVBQUM7QUFDbkMsT0FBZ0IsQ0FDcEIsRUFBQyxDQUFDLE1BQW9CLENBQUEsU0FBcUIsQUFBQyxFQUFDLENBQUMsS0FBSyxHQUFLO0lUZ0Q1RCxNQUFJO0FBQXlDLEVBQUMsU0FBUyxLQUFJLENBQUc7QUFDckUsUUFBSSxVQUFVLENBQUUsS0FBSSxDQUFDLEVBQUksVUFBUyxPQUFNLENBQUc7QUFDekMsU0FBRyxJQUFJLEFBQUMsQ0FBQyxLQUFJLENBQUcsQ0FBQSxJQUFHLE1BQU0sQ0FBRyxRQUFNLENBQUMsQ0FBQztJQUN0QyxDQUFBO0VBQ0YsQ0FBQyxBQUFDLENBQUMsS0FBSSxDQUFDLENBQUM7QVNqREQ7QUFBQSIsImZpbGUiOiJsaWJzL2RpYXJ5L2luZGV4LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIERpYXJ5IHtcbiAgY29uc3RydWN0b3IoZ3JvdXApIHtcbiAgICB0aGlzLmdyb3VwID0gZ3JvdXA7XG4gIH1cblxuICBsb2cobGV2ZWwsIGdyb3VwLCBtZXNzYWdlKSB7XG4gICAgZm9yICh2YXIgdGFyZ2V0IG9mIERpYXJ5LnJlcG9ydGVycykge1xuICAgICAgdmFyIHtjb25maWcsIHJlcG9ydGVyfSA9IHRhcmdldDtcbiAgICAgIGlmICgoY29uZmlnLmxldmVsLmluZGV4T2YoJyonKSAhPT0gLTEgfHwgY29uZmlnLmxldmVsLmluZGV4T2YobGV2ZWwpICE9PSAtMSlcbiAgICAgICAgICAmJlxuICAgICAgICAgIChjb25maWcuZ3JvdXAuaW5kZXhPZignKicpICE9PSAtMSB8fCBjb25maWcuZ3JvdXAuaW5kZXhPZihncm91cCkgIT09IC0xKVxuICAgICAgICAgKSB7XG4gICAgICAgIHJlcG9ydGVyLnJlY2VpdmUoe1xuICAgICAgICAgIGxldmVsLCBncm91cCwgbWVzc2FnZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmFjdG9yeSBtZXRob2QgZm9yIGNvbnZlbmllbnQgbG9nZ2VyIGNvbnN0cnVjdGlvbi5cbiAgICovXG4gIHN0YXRpYyBsb2dnZXIoZ3JvdXApIHtcbiAgICByZXR1cm4gbmV3IERpYXJ5KGdyb3VwKTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSByZXBvcnRlci5cbiAgICovXG4gIHN0YXRpYyByZXBvcnRlcihyZXBvcnRlciwgY29uZmlnID0ge30pIHtcbiAgICB2YXIgZGVmYXVsdHMgPSB7IGxldmVsOiBbJyonXSwgZ3JvdXA6IFsnKiddIH07XG4gICAgY29uZmlnID0gW2RlZmF1bHRzLCBjb25maWddLnJlZHVjZShPYmplY3QuYXNzaWduKTtcbiAgICB2YXIgbmV3UmVwb3J0ZXIgPSB7XG4gICAgICByZXBvcnRlciwgY29uZmlnXG4gICAgfTtcblxuICAgIERpYXJ5LnJlcG9ydGVycy5wdXNoKG5ld1JlcG9ydGVyKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBEaWFyeS5yZXBvcnRlcnMuc3BsaWNlKERpYXJ5LnJlcG9ydGVycy5pbmRleE9mKG5ld1JlcG9ydGVyKSwgMSk7XG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgcmVwb3J0ZXJzKCkge1xuICAgIHJldHVybiByZXBvcnRlcnM7XG4gIH1cbn1cblxudmFyIHJlcG9ydGVycyA9IFtdO1xuXG4vKipcbiAqIER5bmFtaWNhbGx5IGNvbnN0cnVjdCBhbGwgb2YgdGhlIGxvZyBsZXZlbCBmdW5jdGlvbnMuXG4gKi9cbmZvciAodmFyIGxldmVsIG9mIFsnaW5mbycsICd3YXJuJywgJ2ZhdGFsJywgJ2Vycm9yJ10pIChmdW5jdGlvbihsZXZlbCkge1xuICBEaWFyeS5wcm90b3R5cGVbbGV2ZWxdID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgIHRoaXMubG9nKGxldmVsLCB0aGlzLmdyb3VwLCBtZXNzYWdlKTtcbiAgfVxufSkobGV2ZWwpO1xuIiwiT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZXhwb3J0cywgJF9fcGxhY2Vob2xkZXJfXzApOyIsIntnZXQ6ICRfX3BsYWNlaG9sZGVyX18wfSIsImdldCAkX19wbGFjZWhvbGRlcl9fMCgpIHsgcmV0dXJuICRfX3BsYWNlaG9sZGVyX18xOyB9IiwiX19lc01vZHVsZTogdHJ1ZSIsInt2YWx1ZTogJF9fcGxhY2Vob2xkZXJfXzB9IiwidmFyICRfX3BsYWNlaG9sZGVyX18wID0gJF9fcGxhY2Vob2xkZXJfXzEiLCJ2YXIgJF9fcGxhY2Vob2xkZXJfXzAgPSAkX19wbGFjZWhvbGRlcl9fMSIsIigkdHJhY2V1clJ1bnRpbWUuY3JlYXRlQ2xhc3MpKCRfX3BsYWNlaG9sZGVyX18wLCAkX19wbGFjZWhvbGRlcl9fMSwgJF9fcGxhY2Vob2xkZXJfXzIpIiwiXG4gICAgICAgIGZvciAodmFyICRfX3BsYWNlaG9sZGVyX18wID1cbiAgICAgICAgICAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzFbU3ltYm9sLml0ZXJhdG9yXSgpLFxuICAgICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMjtcbiAgICAgICAgICAgICAhKCRfX3BsYWNlaG9sZGVyX18zID0gJF9fcGxhY2Vob2xkZXJfXzQubmV4dCgpKS5kb25lOyApIHtcbiAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fNTtcbiAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fNjtcbiAgICAgICAgfSJdfQ==